$date
	Wed Feb 28 22:03:59 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module carry_lookahead_adder_tb $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " Cout $end
$var reg 4 # A [3:0] $end
$var reg 4 $ B [3:0] $end
$var reg 1 % Cin $end
$scope module ans $end
$var wire 4 & A [3:0] $end
$var wire 4 ' B [3:0] $end
$var wire 1 % Cin $end
$var wire 4 ( sum [3:0] $end
$var wire 4 ) c [3:0] $end
$var wire 1 " Cout $end
$var wire 4 * C [3:0] $end
$scope module c1 $end
$var wire 4 + A [3:0] $end
$var wire 4 , B [3:0] $end
$var wire 1 % Cin $end
$var wire 4 - C [3:0] $end
$upscope $end
$scope module f1 $end
$var wire 1 % Cin $end
$var wire 1 . Cout $end
$var wire 1 / I0 $end
$var wire 1 0 I1 $end
$var wire 1 1 sum $end
$upscope $end
$scope module f2 $end
$var wire 1 2 Cin $end
$var wire 1 3 Cout $end
$var wire 1 4 I0 $end
$var wire 1 5 I1 $end
$var wire 1 6 sum $end
$upscope $end
$scope module f3 $end
$var wire 1 7 Cin $end
$var wire 1 8 Cout $end
$var wire 1 9 I0 $end
$var wire 1 : I1 $end
$var wire 1 ; sum $end
$upscope $end
$scope module f4 $end
$var wire 1 < Cin $end
$var wire 1 = Cout $end
$var wire 1 > I0 $end
$var wire 1 ? I1 $end
$var wire 1 @ sum $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
0%
b0 $
b0 #
0"
b0 !
$end
#5
b10 !
b10 (
16
12
b1 )
1.
b1 *
b1 -
10
1/
b1 $
b1 '
b1 ,
b1 #
b1 &
b1 +
#10
1;
b100 !
b100 (
06
17
02
0.
b10 )
13
b10 *
b10 -
00
0/
14
15
b10 $
b10 '
b10 ,
b10 #
b10 &
b10 +
#15
b110 !
b110 (
16
12
b11 )
1.
b11 *
b11 -
10
1/
b11 $
b11 '
b11 ,
b11 #
b11 &
b11 +
#20
0;
1@
b1000 !
b1000 (
06
07
1<
02
0.
03
b100 )
18
b100 *
b100 -
00
1:
0/
04
05
19
b100 $
b100 '
b100 ,
b100 #
b100 &
b100 +
#25
b1010 !
b1010 (
16
12
b101 )
1.
b101 *
b101 -
10
1/
b101 $
b101 '
b101 ,
b101 #
b101 &
b101 +
#30
1;
b1100 !
b1100 (
06
17
02
0.
b110 )
13
b110 *
b110 -
00
0/
14
15
b110 $
b110 '
b110 ,
b110 #
b110 &
b110 +
#35
1"
b1110 *
b1110 -
1=
0;
b1110 )
18
0@
b1 !
b1 (
11
0:
1?
1/
b1010 $
b1010 '
b1010 ,
b111 #
b111 &
b111 +
#40
0<
07
08
b1000 *
b1000 -
01
b1000 )
03
0;
b0 !
b0 (
0@
0/
04
05
09
1>
b1000 $
b1000 '
b1000 ,
b1000 #
b1000 &
b1000 +
#45
b10 !
b10 (
16
12
b1001 )
1.
b1001 *
b1001 -
10
1/
b1001 $
b1001 '
b1001 ,
b1001 #
b1001 &
b1001 +
#50
1;
b100 !
b100 (
06
17
02
0.
b1010 )
13
b1010 *
b1010 -
00
0/
14
15
b1010 $
b1010 '
b1010 ,
b1010 #
b1010 &
b1010 +
#55
b110 !
b110 (
16
12
b1011 )
1.
b1011 *
b1011 -
10
1/
b1011 $
b1011 '
b1011 ,
b1011 #
b1011 &
b1011 +
#60
0;
1@
b1000 !
b1000 (
06
07
1<
02
0.
03
b1100 )
18
b1100 *
b1100 -
00
1:
0/
04
05
19
b1100 $
b1100 '
b1100 ,
b1100 #
b1100 &
b1100 +
#65
b1010 !
b1010 (
16
12
b1101 )
1.
b1101 *
b1101 -
10
1/
b1101 $
b1101 '
b1101 ,
b1101 #
b1101 &
b1101 +
#70
1;
b1100 !
b1100 (
06
17
02
0.
b1110 )
13
b1110 *
b1110 -
00
0/
14
15
b1110 $
b1110 '
b1110 ,
b1110 #
b1110 &
b1110 +
#75
b1110 !
b1110 (
16
12
b1111 )
1.
b1111 *
b1111 -
10
1/
b1111 $
b1111 '
b1111 ,
b1111 #
b1111 &
b1111 +
#80
